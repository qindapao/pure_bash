. ./meta/meta.sh
((DEFENSE_VARIABLES[fun_process_bar]++)) && return 0

fun_process_bar ()
{
    # https://www.bootschool.net/ascii-art/animals?pageNO=2
    local -a animals_arr=()
    local -i animals_arr_index=0

    # 把数据读入数组的每个元素
    # IFS清空才能保证read命令能读取到空格
    # || true 保证命令退出永远为0,不会触发错误陷阱
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                                  ,
                                   \`-,
                                   |   `\
                                   |     \
                                __/.- - -.\,__
                           _.-'"              `'"'--..,__
                       .-'"                              `'--.,_
                    .'`   _                         _ ___       `)
                  .'   .'` `'-.                    (_`  _`)  _.-'
                .'    '--.     '.                 .-.`"`@ .-'""-,
       .------~'     ,.---'      '-._      _.'   /   `'--'"""".-'
     /`        '   /`  _,..-----.,__ `''''`/    ;__,..--''--'`
     `'--.,__ '    |-'`             `'---'|     |
             `\    \                       \   /
              |     |                       '-'
               \    |^C
                `\  |
                  \/
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
            \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
          __________
         / ___  ___ \
        / / @ \/ @ \ \
        \ \___/\___/ /\
         \____\/____/||
         /     /\\\\\//
        |     |\\\\\\
         \      \\\\\\
           \______/\\\\
            _||_||_
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
            /\_____/\
           /  o   o  \
          ( ==  ^  == )
           )         (
          (           )
         ( (  )   (  ) )
        (__(__)___(__)__)    
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                      _         _                  
     .-""-.          ( )-"```"-( )          .-""-. 
    / O O  \          /         \          /  O O \
    |O .-.  \        /   0 _ 0   \        /  .-. O|
    \ (   )  '.    _|     (_)     |     .'  (   ) /
     '.`-'     '-./ |             |`\.-'     '-'.' 
       \         |  \   \     /   /  |         /   
        \        \   '.  '._.'  .'   /        /    
         \        '.   `'-----'`   .'        /     
          \   .'    '-._        .-'\   '.   /      
           |/`          `'''''')    )    `\|       
           /                  (    (      ,\       
          ;                    \    '-..-'/ ;      
          |                     '.       /  |      
          |                       `'---'`   |      
          ;                                 ;      
           \                               /       
            `.                           .'        
              '-._                   _.-'          
               __/`"  '  - - -  ' "`` \__          
             /`            /^\           `\        
             \(          .'   '.         )/        
              '.(__(__.-'       '.__)__).'    
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                     _  _                   
                    ( \/ )                  
             .---.   \  /   .-"-.           
            /   6_6   \/   / 4 4 \          
            \_  (__\       \_ v _/          
            //   \\        //   \\          
           ((     ))      ((     ))         
       =====""===""========""===""=======   
              |||            |||            
               |              |      
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                                      __
                             /\    .-" /
                            /  ; .'  .' 
                           :   :/  .'   
                            \  ;-.'     
               .--""""--..__/     `.    
             .'           .'    `o  \   
            /                    `   ;  
           :                  \      :  
         .-;        -.         `.__.-'  
        :  ;          \     ,   ;       
        '._:           ;   :   (        
            \/  .__    ;    \   `-.     
             ;     "-,/_..--"`-..__)    
             '""--.._:          
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
          .".".".                             
        (`       `)               _.-=-.      
         '._.--.-;             .-`  -'  '.    
        .-'`.o )  \           /  .-_.--'  `\  
       `;---) \    ;         /  / ;' _-_.-' ` 
         `;"`  ;    \        ; .  .'   _-' \  
          (    )    |        |  / .-.-'    -` 
           '-.-'     \       | .' ` '.-'-\`   
            /_./\_.|\_\      ;  ' .'-'.-.     
            /         '-._    \` /  _;-,      
           |         .-=-.;-._ \  -'-,        
           \        /      `";`-`,-"`)        
            \       \     '-- `\.\            
             '.      '._ '-- '--'/            
               `-._     `'----'`;             
                   `"""--.____,/              
                          \\  \               
                          // /`               
                      ___// /__               
                    (`(`(---"-`)  
    EOF
    } || true
    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                  __,                
               .-'_-'`             
             .' {`                 
         .-'````'-.    .-'``'.     
       .'(0)       '._/ _.-.  `\   
      }     '. ))    _<`    )`  |  
       `-.,\'.\_,.-\` \`---; .' /  
            )  )       '-.  '--:   
           ( ' (          ) '.  \  
            '.  )      .'(   /   ) 
              )/      (   '.    /  
                       '._( ) .'   
                           ( (     
                            `-.   
    EOF
    } || true

    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                      .7
                    .'/
                   / /
                  / /
                 / /
                / /
               / /
              / /
             / /         
            / /          
          __|/
        ,-\__\
        |f-"Y\|
        \()7L/
         cgD                            __ _
         |\(                          .'  Y '>,
          \ \                        / _   _   \
           \\\                       )(_) (_)(|}
            \\\                      {  4A   } /
             \\\                      \uLuJJ/\l
              \\\                     |3    p)/
               \\\___ __________      /nnm_n//
               c7___-__,__-)\,__)(".  \_>-<_/D
                          //V     \_"-._.__G G_c__.-__<"/ ( \
                                 <"-._>__-,G_.___)\   \7\
                                ("-.__.| \"<.__.-" )   \ \
                                |"-.__"\  |"-.__.-".\   \ \
                                ("-.__"". \"-.__.-".|    \_\
                                \"-.__""|!|"-.__.-".)     \ \
                                 "-.__""\_|"-.__.-"./      \ l
                                  ".__""">G>-.__.-">       .--,_
                                      ""  G 
    EOF
    } || true

    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                       _.---._
                     .'       `.
                     :)       (:
                     \ (@) (@) /
                      \   A   /
                       )     (
                       \"""""/
                        `._.'
                         .=.
                 .---._.-.=.-._.---.
                / ':-(_.-: :-._)-:` \
               / /' (__.-: :-.__) `\ \
              / /  (___.-` '-.___)  \ \
             / /   (___.-'^`-.___)   \ \
            / /    (___.-'=`-.___)    \ \
           / /     (____.'=`.____)     \ \
          / /       (___.'=`.___)       \ \
         (_.;       `---'.=.`---'       ;._)
         ;||        __  _.=._  __        ||;
         ;||       (  `.-.=.-.'  )       ||;
         ;||       \    `.=.'    /       ||;
         ;||        \    .=.    /        ||;
         ;||       .-`.`-._.-'.'-.       ||;
        .:::\      ( ,): O O :(, )      /:::.
        |||| `     / /'`--'--'`\ \     ' ||||
        ''''      / /           \ \      ''''
                 / /             \ \
                / /               \ \
               / /                 \ \
              / /                   \ \
             / /                     \ \
            /.'                       `.\
           (_)'                       `(_)
            \\.                       .//
             \\.                     .//
              \\.                   .//
               \\.                 .//
                \\.               .//
                 \\.             .//
                  \\.           .//
                  ///)         (\\\
                ,///'           `\\\,
               ///'               `\\\
              ""'                   '""
    EOF
    } || true

    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
              .-.
             (o.o)
              |=|
             __|__
           //.=|=.\\
          // .=|=. \\
          \\ .=|=. //
           \\(_=_)//
            (:| |:)
             || ||
             () ()
             || ||
             || ||
            ==' '==
    EOF
    } || true

    {
    IFS= read -r -d '' animals_arr[animals_arr_index++] <<'    EOF'
                               ,-.
          ___,---.__          /'|`\          __,---,___
       ,-'    \`    `-.____,-'  |  `-.____,-'    //    `-.
     ,'        |           ~'\     /`~           |        `.
    /      ___//              `. ,'          ,  , \___      \
   |    ,-'   `-.__   _         |        ,    __,-'   `-.    |
   |   /          /\_  `   .    |    ,      _/\          \   |
   \  |           \ \`-.___ \   |   / ___,-'/ /           |  /
    \  \           | `._   `\\  |  //'   _,' |           /  /
     `-.\         /'  _ `---'' , . ``---' _  `\         /,-'
        ``       /     \    ,='/ \`=.    /     \       ''
                |__   /|\_,--.,-.--,--._/|\   __|
                /  `./  \\`\ |  |  | /,//' \,'  \
               /   /     ||--+--|--+-/-|     \   \
              |   |     /'\_\_\ | /_/_/`\     |   |
               \   \__, \_     `~'     _/ .__/   /
                `-._,-'   `-._______,-'   `-._,-'
    EOF
    } || true

    printf "%s\n" "${animals_arr[RANDOM%${#animals_arr[@]}]}"

    local -a show_time_arr=(
        "o_o haha you need wait ${1} seconds o_o"
        "o.o time is money but you need wait ${1} seconds o.o"
        "-.- have a coffee and then wait ${1} seconds -.-"
        "=.= Don't worry, the ${1} seconds will pass quickly. =.="
        )

    local show_time_str=${2-${show_time_arr[RANDOM%${#show_time_arr[@]}]}}
    local -i wait_senconds=${1:-10}
    local sleep_time=$(awk 'BEGIN {print('$wait_senconds'/100)}')

    local -i pi=-1
    local icon=''
    local -a arr=('|' '/' '-' '\\')
    local -i index=0
    while ((pi++<100))
    do
        let index=pi%${#arr[@]}
        printf "[%-100s][%d%%][%c]\r" "$icon" "$pi" "${arr[index]}"
        if ((${#show_time_str})) ; then
            icon="${show_time_str: -1}$icon"
            show_time_str=${show_time_str%?}
        else
            icon=' '$icon
        fi
        sleep $sleep_time
    done
    echo
    true
}

return 0

